
// This file was autogenerated by PeakRDL-uvm
package spi_reg_pkg;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    
    // Reg - spi_reg::MOTORSPD
    class spi_reg__MOTORSPD extends uvm_reg;
        `uvm_object_utils(spi_reg__MOTORSPD)
        rand uvm_reg_field MOTORSPD;

        function new(string name = "spi_reg__MOTORSPD");
            super.new(name, 16, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.MOTORSPD = uvm_reg_field::type_id::create("MOTORSPD");
            this.MOTORSPD.configure(this, 16, 0, "RW", 0, 'h100, 1, 1, 0);
        endfunction : build
    endclass : spi_reg__MOTORSPD

    // Reg - spi_reg::PARK
    class spi_reg__PARK extends uvm_reg;
        `uvm_object_utils(spi_reg__PARK)
        rand uvm_reg_field ENABLE;
        rand uvm_reg_field RESRVED;

        function new(string name = "spi_reg__PARK");
            super.new(name, 16, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.ENABLE = uvm_reg_field::type_id::create("ENABLE");
            this.ENABLE.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.RESRVED = uvm_reg_field::type_id::create("RESRVED");
            this.RESRVED.configure(this, 15, 1, "RO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : spi_reg__PARK

    // Reg - spi_reg::BENDING
    class spi_reg__BENDING extends uvm_reg;
        `uvm_object_utils(spi_reg__BENDING)
        rand uvm_reg_field BENDING;
        rand uvm_reg_field RESRVED;

        function new(string name = "spi_reg__BENDING");
            super.new(name, 16, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.BENDING = uvm_reg_field::type_id::create("BENDING");
            this.BENDING.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.RESRVED = uvm_reg_field::type_id::create("RESRVED");
            this.RESRVED.configure(this, 15, 1, "RO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : spi_reg__BENDING

    // Reg - spi_reg::FAN
    class spi_reg__FAN extends uvm_reg;
        `uvm_object_utils(spi_reg__FAN)
        rand uvm_reg_field CLOSE2OVERHEAT;
        rand uvm_reg_field RESRVED;

        function new(string name = "spi_reg__FAN");
            super.new(name, 16, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.CLOSE2OVERHEAT = uvm_reg_field::type_id::create("CLOSE2OVERHEAT");
            this.CLOSE2OVERHEAT.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            this.RESRVED = uvm_reg_field::type_id::create("RESRVED");
            this.RESRVED.configure(this, 15, 1, "RO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : spi_reg__FAN

    // Reg - spi_reg::FAULT
    class spi_reg__FAULT extends uvm_reg;
        `uvm_object_utils(spi_reg__FAULT)
        rand uvm_reg_field SPIVIOLATION;
        rand uvm_reg_field RESRVED;

        function new(string name = "spi_reg__FAULT");
            super.new(name, 16, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.SPIVIOLATION = uvm_reg_field::type_id::create("SPIVIOLATION");
            this.SPIVIOLATION.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            this.RESRVED = uvm_reg_field::type_id::create("RESRVED");
            this.RESRVED.configure(this, 15, 1, "RO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : spi_reg__FAULT

    // Reg - spi_reg::READY
    class spi_reg__READY extends uvm_reg;
        `uvm_object_utils(spi_reg__READY)
        rand uvm_reg_field OVERHEAT;
        rand uvm_reg_field RESRVED;

        function new(string name = "spi_reg__READY");
            super.new(name, 16, UVM_NO_COVERAGE);
        endfunction : new

        virtual function void build();
            this.OVERHEAT = uvm_reg_field::type_id::create("OVERHEAT");
            this.OVERHEAT.configure(this, 1, 0, "RO", 1, 'h0, 1, 1, 0);
            this.RESRVED = uvm_reg_field::type_id::create("RESRVED");
            this.RESRVED.configure(this, 15, 1, "RO", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : spi_reg__READY

    // Addrmap - spi_reg
    class spi_reg extends uvm_reg_block;
        `uvm_object_utils(spi_reg)
        rand spi_reg__MOTORSPD MOTORSPD;
        rand spi_reg__PARK PARK;
        rand spi_reg__BENDING BENDING;
        rand spi_reg__FAN FAN;
        rand spi_reg__FAULT FAULT;
        rand spi_reg__READY READY;

        function new(string name = "spi_reg");
            super.new(name);
        endfunction : new

        virtual function void build();
            this.default_map = create_map("reg_map", 0, 2, UVM_NO_ENDIAN);
            this.MOTORSPD = spi_reg__MOTORSPD::type_id::create("MOTORSPD");
            this.MOTORSPD.configure(this);

            this.MOTORSPD.build();
            this.default_map.add_reg(this.MOTORSPD, 'h0);
            this.PARK = spi_reg__PARK::type_id::create("PARK");
            this.PARK.configure(this);

            this.PARK.build();
            this.default_map.add_reg(this.PARK, 'h2);
            this.BENDING = spi_reg__BENDING::type_id::create("BENDING");
            this.BENDING.configure(this);

            this.BENDING.build();
            this.default_map.add_reg(this.BENDING, 'h4);
            this.FAN = spi_reg__FAN::type_id::create("FAN");
            this.FAN.configure(this);

            this.FAN.build();
            this.default_map.add_reg(this.FAN, 'h6);
            this.FAULT = spi_reg__FAULT::type_id::create("FAULT");
            this.FAULT.configure(this);

            this.FAULT.build();
            this.default_map.add_reg(this.FAULT, 'h8);
            this.READY = spi_reg__READY::type_id::create("READY");
            this.READY.configure(this);

            this.READY.build();
            this.default_map.add_reg(this.READY, 'ha);
        endfunction : build
    endclass : spi_reg

endpackage: spi_reg_pkg
